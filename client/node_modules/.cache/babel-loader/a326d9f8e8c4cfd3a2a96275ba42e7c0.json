{"ast":null,"code":"import _slicedToArray from \"/Users/spacecaptain2/Desktop/Lambda/Builds/buildweek-restaurant-passport/Front-End/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/spacecaptain2/Desktop/Lambda/Builds/buildweek-restaurant-passport/Front-End/client/src/components/Registration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport axiosWithAuth from '../utils/axiosWithAuth';\nimport { Button } from \"semantic-ui-react\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport * as Yup from \"yup\";\n\nconst Registration = props => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        userRegistration = _useState2[0],\n        setUserRegistration = _useState2[1];\n\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.errors;\n\n  const onSubmit = async data => {\n    if (data.password === data.confirmPassword) {\n      const payload = {\n        'username': data.username,\n        'password': data.password,\n        'email': data.email\n      };\n      console.log(payload);\n      axiosWithAuth().post(\"/users/register\", payload).then(response => {\n        console.log(\"Account registered\", response.data);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return (// <>\n    //   <div className=\"login-container\">\n    //     <h1>Register</h1>\n    //     <Form className=\"form\">\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"username\"\n    //         placeholder=\"User Name\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"username\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"password\"\n    //         name=\"password\"\n    //         placeholder=\"Password\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"password\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"fullname\"\n    //         placeholder=\"Full Name\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"fullname\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"city\"\n    //         placeholder=\"City\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"city\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"email\"\n    //         name=\"email\"\n    //         placeholder=\"Email Address\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"email\" />\n    //       <br /> <br />\n    //       <Button type=\"submit\"> Register </Button>\n    //       <br /> <br />\n    //     </Form>\n    //   </div>\n    // </>\n    React.createElement(\"div\", {\n      className: \"form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"username\",\n      id: \"username\",\n      ref: register({\n        required: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), errors.username && 'A username is required.'), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Email Address\"), React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      ref: register({\n        required: true,\n        pattern: {\n          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n          message: \"An email address is required.\"\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), errors.email && errors.email.message), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      ref: register({\n        required: true,\n        minLength: 4\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"confirmPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"confirmPassword\",\n      id: \"confirmPassword\",\n      ref: register({\n        required: true,\n        minLength: 4\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Create Account\"))))\n  );\n};\n\nexport default Registration; // function Registration() {\n// const LogIn = <a href=\"/log-in\">Login</a>;\n//   return (\n//     <>\n//       <div className=\"login-container\">\n//         <h1>Register</h1>\n//         <Form className=\"form\">\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"text\"\n//             name=\"username\"\n//             placeholder=\"User Name\"\n//           />\n//           <br /> <br />\n//           <ErrorMessage name=\"username\" />\n//           <br /> <br />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"password\"\n//             name=\"password\"\n//             placeholder=\"Password\"\n//           />\n//           <br /> <br />\n//           <ErrorMessage name=\"password\" />\n//           <br /> <br />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"text\"\n//             name=\"fullname\"\n//             placeholder=\"Full Name\"\n//           />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"email\"\n//             name=\"email\"\n//             placeholder=\"Email Address\"\n//           />\n//           <ErrorMessage name=\"email\" />\n//           <p>Already have an account? {LogIn}</p>\n//           <Button type=\"submit\"> Login </Button>\n//           <br /> <br />\n//         </Form>\n//       </div>\n//     </>\n//   );\n// }\n// const FormikRegister = withFormik({\n//   mapPropsToValues({ username, fullname, city, password, email }) {\n//     return {\n//       username: username || \"\",\n//       fullname: fullname || \"\",\n//       city: city || \"\",\n//       password: password || \"\",\n//       email: email || \"\"\n//     };\n//   },\n//   validationSchema: Yup.object().shape({\n//     username: Yup.string().required(\"Please enter a username.\"),\n//     fullname: Yup.string().required(\"Please enter your full name.\"),\n//     city: Yup.string().required(\"Please enter your city.\"),\n//     email: Yup.string().required(\"Please enter your email address.\"),\n//     password: Yup.string()\n//       .min(6, \"Password must be at least 6 chars.\")\n//       .required(\"Password is required.\")\n//   }),\n//   handleSubmit(values, { setStatus, resetForm }) {\n//     console.log(\"This is the data:\", values);\n//     setStatus(values);\n//     resetForm();\n//   }\n// })(Registration);\n// export default FormikRegister;","map":{"version":3,"sources":["/Users/spacecaptain2/Desktop/Lambda/Builds/buildweek-restaurant-passport/Front-End/client/src/components/Registration.js"],"names":["React","useState","useEffect","Link","useForm","axiosWithAuth","Button","withFormik","Form","Field","ErrorMessage","styled","axios","Yup","Registration","props","userRegistration","setUserRegistration","register","handleSubmit","errors","onSubmit","data","password","confirmPassword","payload","username","email","console","log","post","then","response","catch","error","required","pattern","value","message","minLength"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport axiosWithAuth from '../utils/axiosWithAuth';\nimport { Button } from \"semantic-ui-react\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport * as Yup from \"yup\";\n\nconst Registration = (props) => {\n\n  const [userRegistration, setUserRegistration] = useState({});\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = async data => {\n    if (data.password === data.confirmPassword) {\n\n\n      const payload = {\n        'username': data.username,\n        'password': data.password,\n        'email': data.email\n      }\n\n      console.log(payload)\n\n      axiosWithAuth()\n        .post(\"/users/register\", payload)\n        .then(response => {\n          console.log(\"Account registered\", response.data);\n        })\n        .catch(error => console.log(error));\n    }\n  };\n\n  return (\n    // <>\n\n    //   <div className=\"login-container\">\n    //     <h1>Register</h1>\n    //     <Form className=\"form\">\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"username\"\n    //         placeholder=\"User Name\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"username\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"password\"\n    //         name=\"password\"\n    //         placeholder=\"Password\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"password\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"fullname\"\n    //         placeholder=\"Full Name\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"fullname\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"text\"\n    //         name=\"city\"\n    //         placeholder=\"City\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"city\" />\n    //       <br /> <br />\n    //       <Field\n    //         className=\"field\"\n    //         component=\"input\"\n    //         type=\"email\"\n    //         name=\"email\"\n    //         placeholder=\"Email Address\"\n    //       />\n    //       <br /> <br />\n    //       <ErrorMessage name=\"email\" />\n    //       <br /> <br />\n\n    //       <Button type=\"submit\"> Register </Button>\n    //       <br /> <br />\n    //     </Form>\n    //   </div>\n    // </>\n\n    <div className='form-container'>\n\n      <h2>Register</h2>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n\n        <div className='form-group'>\n          <label htmlFor='username'>Username</label>\n          <input className='form-control' type='text' name='username' id='username' ref={register({ required: true })} />\n          {errors.username && 'A username is required.'}\n        </div>\n\n        <div className='form-group'>\n          <label htmlFor='email'>Email Address</label>\n          <input className='form-control' type='email' name='email' id='email' ref={register({\n            required: true, pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, message: \"An email address is required.\"\n            }\n          })} />\n          {errors.email && errors.email.message}\n        </div>\n\n        <div className='form-group'>\n          <label htmlFor='password'>Password</label>\n          <input className='form-control' type='password' name='password' id='password' ref={register({ required: true, minLength: 4 })} />\n          <label htmlFor='confirmPassword'>Confirm Password</label>\n          <input className='form-control' type='password' name='confirmPassword' id='confirmPassword' ref={register({ required: true, minLength: 4 })} />\n        </div>\n\n        <div className='form-group'>\n          <button className='btn btn-primary' type=\"submit\">Create Account</button>\n        </div>\n\n      </form>\n\n    </div>\n\n  );\n\n}\n\nexport default Registration;\n\n\n// function Registration() {\n// const LogIn = <a href=\"/log-in\">Login</a>;\n//   return (\n//     <>\n\n//       <div className=\"login-container\">\n//         <h1>Register</h1>\n//         <Form className=\"form\">\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"text\"\n//             name=\"username\"\n//             placeholder=\"User Name\"\n//           />\n//           <br /> <br />\n//           <ErrorMessage name=\"username\" />\n//           <br /> <br />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"password\"\n//             name=\"password\"\n//             placeholder=\"Password\"\n//           />\n//           <br /> <br />\n//           <ErrorMessage name=\"password\" />\n//           <br /> <br />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"text\"\n//             name=\"fullname\"\n//             placeholder=\"Full Name\"\n//           />\n//           <Field\n//             className=\"field\"\n//             component=\"input\"\n//             type=\"email\"\n//             name=\"email\"\n//             placeholder=\"Email Address\"\n//           />\n//           <ErrorMessage name=\"email\" />\n//           <p>Already have an account? {LogIn}</p>\n//           <Button type=\"submit\"> Login </Button>\n//           <br /> <br />\n//         </Form>\n//       </div>\n//     </>\n//   );\n// }\n\n// const FormikRegister = withFormik({\n//   mapPropsToValues({ username, fullname, city, password, email }) {\n//     return {\n//       username: username || \"\",\n//       fullname: fullname || \"\",\n//       city: city || \"\",\n//       password: password || \"\",\n//       email: email || \"\"\n//     };\n//   },\n\n//   validationSchema: Yup.object().shape({\n//     username: Yup.string().required(\"Please enter a username.\"),\n//     fullname: Yup.string().required(\"Please enter your full name.\"),\n//     city: Yup.string().required(\"Please enter your city.\"),\n//     email: Yup.string().required(\"Please enter your email address.\"),\n//     password: Yup.string()\n//       .min(6, \"Password must be at least 6 chars.\")\n//       .required(\"Password is required.\")\n//   }),\n\n//   handleSubmit(values, { setStatus, resetForm }) {\n//     console.log(\"This is the data:\", values);\n//     setStatus(values);\n//     resetForm();\n//   }\n// })(Registration);\n\n// export default FormikRegister;\n"]},"metadata":{},"sourceType":"module"}